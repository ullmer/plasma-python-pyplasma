#!python

import os, platform
import plasma.const
import plasma.config

def main():
    print 'g-speak SOE (c) Oblong Industries - py-plasma %s' % plasma.const.PYPLASMA_VERSION
    printsec('Compile-time things')
    printvar('g-speak version', 'py-plasma %s' % plasma.const.PYPLASMA_VERSION)
    printvar('bit width', platform.architecture()[0][:2])
    printvar('ob_prefix_dir', plasma.config.ob_prefix_dir())
    printsec('Run-time things')
    printvar('os version', plasma.config.os_version())
    printvar('kernel version', plasma.config.kernel_version())
    printvar('libc version', plasma.config.libc_version())
    printvar('python version', platform.python_version())
    printvar('yobuild version', plasma.config.yobuild_version())
    printvar('ob_share_path', plasma.config.ob_share_path())
    printvar('ob_etc_path', plasma.config.ob_etc_path())
    printvar('ob_var_path', plasma.config.ob_var_path())
    printvar('ob_tmp_dir', plasma.config.ob_tmp_dir())
    printvar('ob_pools_dir', plasma.config.ob_pools_dir())
    printvar('ob_yobuild_dir', plasma.config.ob_yobuild_dir())
    printsec('Environment variables')
    sep = os.path.pathsep
    printenv(sep, "LD_LIBRARY_PATH")
    printenv(sep, "LD_PRELOAD")
    printenv(sep, "LD_TRACE_LOADED_OBJECTS")
    printenv(sep, "LD_BIND_NOW")
    printenv(sep, "LD_BIND_NOT")
    printenv(sep, "LD_AOUT_LIBRARY_PATH")
    printenv(sep, "LD_AOUT_PRELOAD")
    printenv(sep, "LD_NOWARN")
    printenv(sep, "LD_WARN")
    printenv(sep, "LD_KEEPDIR")
    printenv(sep, "LD_DEBUG")
    printenv(sep, "LD_DEBUG_OUTPUT")
    printenv(sep, "LD_VERBOSE")
    printenv(sep, "LD_PROFILE")
    printenv(sep, "LD_PROFILE_OUTPUT")
    printenv(sep, "LD_ASSUME_KERNEL")
    printenv(sep, "DYLD_FRAMEWORK_PATH")
    printenv(sep, "DYLD_FALLBACK_FRAMEWORK_PATH")
    printenv(sep, "DYLD_LIBRARY_PATH")
    printenv(sep, "DYLD_FALLBACK_LIBRARY_PATH")
    printenv(sep, "DYLD_ROOT_PATH")
    printenv(sep, "DYLD_SHARED_REGION")
    printenv(sep, "DYLD_INSERT_LIBRARIES")
    printenv(sep, "DYLD_FORCE_FLAT_NAMESPACE")
    printenv(sep, "DYLD_IMAGE_SUFFIX")
    printenv(sep, "DYLD_PRINT_OPTS")
    printenv(sep, "DYLD_PRINT_ENV")
    printenv(sep, "DYLD_PRINT_LIBRARIES")
    printenv(sep, "DYLD_PRINT_LIBRARIES_POST_LAUNCH")
    printenv(sep, "DYLD_BIND_AT_LAUNCH")
    printenv(sep, "DYLD_NO_FIX_PREBINDING")
    printenv(sep, "DYLD_DISABLE_DOFS")
    printenv(sep, "DYLD_PRINT_APIS")
    printenv(sep, "DYLD_PRINT_BINDINGS")
    printenv(sep, "DYLD_PRINT_INITIALIZERS")
    printenv(sep, "DYLD_PRINT_REBASINGS")
    printenv(sep, "DYLD_PRINT_SEGMENTS")
    printenv(sep, "DYLD_PRINT_STATISTICS")
    printenv(sep, "DYLD_PRINT_DOFS")
    printenv(sep, "RUBYLIB")
    printenv(sep, "RUBYOPT")
    printenv(sep, "RUBYPATH")
    printenv(sep, "RUBYSHELL")
    printenv(sep, "PYTHONPATH")
    printenv(sep, "PYTHONHOME")
    printenv(sep, "PATH")
    printenv(sep, "RUBYLIB_PREFIX")
    printenv(sep, "MallocLogFile")
    printenv(sep, "MallocGuardEdges")
    printenv(sep, "MallocDoNotProtectPrelude")
    printenv(sep, "MallocDoNotProtectPostlude")
    printenv(sep, "MallocStackLogging")
    printenv(sep, "MallocStackLoggingNoCompact")
    printenv(sep, "MallocScribble")
    printenv(sep, "MallocCheckHeapStart")
    printenv(sep, "MallocCheckHeapEach")
    printenv(sep, "MallocCheckHeapSleep")
    printenv(sep, "MallocCheckHeapAbort")
    printenv(sep, "MallocErrorAbort")
    printenv(sep, "MallocHelp")
    printenv(sep, "OBLONG_MACHINE_SETUP_UNRECOGNIZED_PLATFORM")
    printenv(sep, "OBLONG_MACHINE_SETUP_UNRECOGNIZED_PLATFORM_COVERITY")
    printenv(sep, "OBLONG_MACHINE_SETUP_COVERITY_NOT_SUPPORTED_ON_MAC_106")
    printenv(sep, "OBLONG_MACHINE_SETUP_MAC_COVERITY_SUPPORT_UNKNOWN")
    printenv(sep, "OBLONG_MACHINE_SETUP_COULD_NOT_DETERMINE_NUM_SEMS")
    printenv(sep, "OBLONG_MACHINE_SETUP_TOO_FEW_SEMS")
    printenv(sep, "OBLONG_MACHINE_SETUP_MISSING_PACKAGES")
    printenv(sep, "OBLONG_MACHINE_SETUP_UNEXPECTED_KERNEL")
    printenv(sep, "OBLONG_MACHINE_SETUP_BAD_YOBUILD")
    printenv(sep, "LANG")
    printenv(sep, "LC_ALL")
    printenv(sep, "LC_COLLATE")
    printenv(sep, "LC_CTYPE")
    printenv(sep, "LC_MESSAGES")
    printenv(sep, "LC_MONETARY")
    printenv(sep, "LC_NUMERIC")
    printenv(sep, "LC_TIME")
    printenv("",  "DISPLAY")
    printenv(sep, "GST_PLUGIN_PATH")
    printenv(sep, "ISE_COORD_POOL")
    printenv(sep, "KIPPLE")
    printenv(sep, "LIBVID_NO_GLSL_COLORSPACE")
    printenv(sep, "NET_FETCH_POOL")
    printenv(sep, "OB_FOR_TESTING_PURPOSES_ASSUME_POOLS_ARENT_SLEEPING")
    printenv(" ", "OB_LOG")
    printenv(sep, "OB_POOLS_DIR")
    printenv(sep, "OB_TMP_DIR")
    printenv(sep, "POGO_COMMAND")
    printenv(sep, "TMPDIR")
    printenv(sep, "YOBUILD")
    printenv(sep, "YOVERSION")
    printenv(sep, "YOWORDSZ")
    printenv(sep, "G_SPEAK_HOME")
    printenv(sep, "CC")
    printenv(sep, "CPP")
    printenv(" ", "CPPFLAGS")
    printenv(" ", "CFLAGS")
    printenv(sep, "CXX")
    printenv(sep, "CXXCPP")
    printenv(" ", "CXXFLAGS")
    printenv(sep, "OBJC")
    printenv(sep, "OBJCPP")
    printenv(" ", "OBJCFLAGS")
    printenv(sep, "OBJCXX")
    printenv(sep, "OBJCXXCPP")
    printenv(" ", "OBJCXXFLAGS")
    printenv(sep, "CCAS")
    printenv(" ", "CCASFLAGS")
    printenv(sep, "__GL_FSAA_MODE")
    printenv(sep, "__GL_LOG_MAX_ANISO")
    printenv(sep, "__GL_SYNC_TO_VBLANK")
    printenv(sep, "__GL_SYNC_DISPLAY_DEVICE")
    printenv(sep, "__GL_SORT_FBCONFIGS")
    printenv(sep, "__GL_YIELD")
    printenv(sep, "XLIB_SKIP_ARGB_VISUALS")
    printenv(sep, "LIBGL_ALWAYS_INDIRECT")
    printenv(sep, "LIBGL_ALWAYS_SOFTWARE")
    printenv("",  "POSIXLY_CORRECT")


def printenv(sep, var):
    if sep == '':
        val = os.getenv(var)
    else:
        val = os.getenv(var)
        if val is not None and val != '':
            val = val.split(sep)
    if val is not None and val != '':
        printvar(var, val)

def printvar(var, val):
    if isinstance(val, list):
        if len(val) == 0:
            print '%16s : ' % var
        else:
            print '%16s : %s' % (var, val[0])
            for i in range(1, len(val)):
                if val[i] is not None and val[i] != '':
                    print '%16s : %s' % ('', val[i])
    else:
        print '%16s : %s' % (var, val)

def printsec(name):
    print ''
    print name
    print '=' * len(name)

if '__main__' == __name__:
    main()

